{"version":3,"sources":["logo.svg","Time.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Time","props","state","currentTime","moment","console","log","this","displayDifference","includeTime","Math","abs","format","diff","targetTime","displayExtras","date","style","display","textAlign","value","toDate","unit","dynamic","setInterval","setState","React","Component","App","className","add","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,oMCqF5BC,E,YA/Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,YAAaC,OAHE,E,sEAajBC,QAAQC,IAAI,QAASC,KAAKL,OAC1B,IAAMM,EAAoBD,KAAKN,MAAMQ,YACjCC,KAAKC,IACHP,IAAOA,MAASQ,UAAUC,KAAKN,KAAKN,MAAMa,WAAY,aACnD,EAGLJ,KAAKC,IACHP,IAAOA,MAASQ,UAAUC,KAAKN,KAAKN,MAAMa,WAAY,UACnD,EAGT,OACE,6BACGP,KAAKN,MAAMc,cACV,6BACE,6CACe,kBAAC,IAAD,CAAQC,KAAMT,KAAKL,MAAMC,cACtC,6BACA,yBACEc,MAAO,CACLC,QAAS,eACTC,UAAW,WAGb,kBAAC,IAAD,CAAOC,MAAOb,KAAKL,MAAMC,YAAYkB,aAGzC,6BACE,6BADF,gBAEe,kBAAC,IAAD,CAAQL,KAAMT,KAAKN,MAAMa,aACtC,6BACA,yBACEG,MAAO,CACLC,QAAS,eACTC,UAAW,WAGb,kBAAC,IAAD,CAAOC,MAAOb,KAAKN,MAAMa,WAAWO,cAK1C,4BAEDb,EACC,yCACc,IACZ,kBAAC,IAAD,CAAQK,KAAMN,KAAKL,MAAMC,YAAamB,KAAK,WACxCf,KAAKN,MAAMa,YACJ,IAJZ,WAQA,+B,0CAKa,IAAD,OAClBT,QAAQC,IAAI,aACRC,KAAKN,MAAMsB,SACbC,aAAY,kBAAM,EAAKC,SAAS,CAAEtB,YAAaC,UAAa,S,GA5E/CsB,IAAMC,W,MCcVC,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CACEf,WAAYV,MAAS0B,IAAI,EAAG,WAC5BrB,aAAa,EACbc,SAAS,EACTR,eAAe,MCDHgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.10ec208f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport Moment from \"react-moment\";\nimport moment from \"moment\";\nimport Clock from \"react-clock\";\n\nclass Time extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTime: moment()\n    };\n  }\n  //   changeColor = () => {\n  //     this.setState({ color: \"blue\" });\n  //   };\n  //   updateTime() {\n  //       this.setState\n  //   }\n  render() {\n    console.log(\"state\", this.state);\n    const displayDifference = this.props.includeTime\n      ? Math.abs(\n          moment(moment().format()).diff(this.props.targetTime, \"seconds\")\n        ) >= 1\n      : // ? \"greater than 1 second\"\n        // : \"less than one second\"\n        Math.abs(\n          moment(moment().format()).diff(this.props.targetTime, \"days\")\n        ) >= 1;\n    //   ? \"greater than 1 day\"\n    //   : \"less than 1 day\";\n    return (\n      <div>\n        {this.props.displayExtras ? (\n          <div>\n            <div>\n              Current time <Moment date={this.state.currentTime} />\n              <br></br>\n              <div\n                style={{\n                  display: \"inline-block\",\n                  textAlign: \"center\"\n                }}\n              >\n                <Clock value={this.state.currentTime.toDate()} />\n              </div>\n            </div>\n            <div>\n              <br></br>\n              Target time: <Moment date={this.props.targetTime} />\n              <br></br>\n              <div\n                style={{\n                  display: \"inline-block\",\n                  textAlign: \"center\"\n                }}\n              >\n                <Clock value={this.props.targetTime.toDate()} />\n              </div>\n            </div>\n          </div>\n        ) : (\n          <p></p>\n        )}\n        {displayDifference ? (\n          <p>\n            Difference:{\" \"}\n            <Moment diff={this.state.currentTime} unit=\"minutes\">\n              {this.props.targetTime}\n            </Moment>{\" \"}\n            minutes\n          </p>\n        ) : (\n          <p></p>\n        )}\n      </div>\n    );\n  }\n  componentDidMount() {\n    console.log(\"refreshed\");\n    if (this.props.dynamic)\n      setInterval(() => this.setState({ currentTime: moment() }), 1000);\n  }\n}\n\nexport default Time;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Time from \"./Time\";\nimport \"./App.css\";\nimport moment from \"moment\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Time\n        targetTime={moment().add(5, \"minutes\")}\n        includeTime={true}\n        dynamic={true}\n        displayExtras={true}\n      ></Time>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}